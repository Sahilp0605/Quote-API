@page "/fetchdata"

<PageTitle>Quotes</PageTitle>

@using QuoteUI.Data
@using QuoteUI.Service
@inject WeatherForecastService ForecastService
@inject QuoteService service

<h1>Quotes</h1>

<div class="row">
    <div class="col-md-6">
        <a href="/Quote/add" class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Quote
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterQuotes" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-info" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>


@if (FilteredQuotes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Author</th>
                <th>Quote</th>
                <th>Tags</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quote in FilteredQuotes)
            {
                <tr>
                    <td>@quote.Author</td>
                    <td>@quote.QuoteName</td>
                    <td>@(quote.Tags != null ? string.Join(", ", quote.Tags) : "No tags")</td>
                    <td>
                        <a href="/Quote/edit/@quote.Id" class="btn btn-primary" role="button">Edit</a>
                        <button class="btn btn-danger" @onclick="() => DeleteQuote(quote.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<QuoteUI.Model.Quote> FilteredQuotes = new List<QuoteUI.Model.Quote>();
    List<QuoteUI.Model.Quote> Quotes = new List<QuoteUI.Model.Quote>();
    // string SearchString { get; set; }
    protected string SearchString { get; set; } = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var response = await service.GetAllQuotes();

        if (response.StatusCode == Common.Enums.Status.Success)
        {
            Quotes = (List<QuoteUI.Model.Quote>)response.ReturnValue;
            FilteredQuotes = Quotes;
        }
        else
        {
            Console.WriteLine("Failed to fetch quotes from the API.");
        }

    }

    protected void FilterQuotes()
    {
        if (string.IsNullOrWhiteSpace(SearchString))
        {
            FilteredQuotes = Quotes;
        }
        else
        {
            FilteredQuotes = Quotes.Where(q =>
            q.Author.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
            q.QuoteName.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
            (q.Tags != null && q.Tags.Any(tag => tag.Contains(SearchString, StringComparison.OrdinalIgnoreCase)))
        ).ToList();
        }
    }

    protected void ResetSearch()
    {
        SearchString = "";
        FilterQuotes();
    }


    protected async void DeleteQuote(int quoteId)
    {
        var response = await service.DeleteQuote(quoteId);

        if (response.StatusCode == Common.Enums.Status.Success)
        {
            var quotesResponse = await service.GetAllQuotes();
            if (quotesResponse.StatusCode == Common.Enums.Status.Success)
            {
                Quotes = (List<QuoteUI.Model.Quote>)quotesResponse.ReturnValue;
                FilteredQuotes = Quotes;
            }
            else
            {
                Console.WriteLine("Failed to fetch quotes from the API after deletion.");

            }
        }
        else
        {
            Console.WriteLine("Failed to delete quote.");
        }

    }


}
