@page "/fetchquote"
@using QuoteUI.Service
@inject QuoteService services

<h2>Quote Data</h2>
<p>This component demonstrates CRUD operation on Quote data</p>

<div class="row">
    <div class="col-md-6">
        <a href="/Quote/add" class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Quote
        </a>
    </div>
    <div class="input-group col-md-6">
        <input type="text" class="form-control" placeholder="Search quote" @bind="SearchString" @bind:event="oninput" />
        <div class="input-group-append">
            <button class="btn btn-info" @onclick="ResetSearch">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

<br />

<table class="table">
    <thead>
        <tr>
            <th>Author</th>
            <th>Quote</th>
            <th>Tags</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var quote in FilteredQuotes)
        {
            <tr>
                <td>@quote.Author</td>
                <td>@quote.QuoteName</td>
                <td>@string.Join(", ", quote.Tags)</td>
                <td>
                    <a href="/Quote/edit/@quote.Id" class="btn btn-primary" role="button">Edit</a>
                    <button class="btn btn-danger" @onclick="() => DeleteQuote(quote.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code{
    string SearchString { get; set; }

    List<QuoteUI.Model.Quote> FilteredQuotes = new List<QuoteUI.Model.Quote>();
    List<QuoteUI.Model.Quote> Quotes = new List<QuoteUI.Model.Quote>();

    private async Task FetchQuotesAsync()
    {
        var response = await services.GetAllQuotes();

        if (response.StatusCode == Common.Enums.Status.Success)
        {
            Quotes = (List<QuoteUI.Model.Quote>)response.ReturnValue;
            FilteredQuotes = Quotes;
        }
        else
        {
            Console.WriteLine("Failed to fetch quotes from the API.");
        }
    }

    protected void FilterQuotes()
    {
        if (string.IsNullOrWhiteSpace(SearchString))
        {
            FilteredQuotes = Quotes;
        }
        else
        {
            FilteredQuotes = Quotes.Where(q =>
                q.Author.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                q.QuoteName.Contains(SearchString, StringComparison.OrdinalIgnoreCase) ||
                q.Tags.Any(tag => tag.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }

    protected void ResetSearch()
    {
        SearchString = "";
        FilterQuotes();
    }

    protected void DeleteQuote(int quoteId)
    {
        // Implement deletion logic here, for example:
        // quoteService.DeleteQuote(quoteId);
        // Reload quotes after deletion
        // Quotes = await quoteService.GetQuotes();
        // FilteredQuotes = Quotes;
    }

}